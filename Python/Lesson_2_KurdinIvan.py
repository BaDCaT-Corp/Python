# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных
# каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя,
# а указать явно, в программе.

l_list = [66.25, 'House', 333, 'World', 1234.5, [2, 2, 3], {1, '1'}]
for element in l_list:
    print(type(element))

# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с
# индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().

l_list2 = []
count = int(input('Введите количество элементов:'))
for i in range(0, count):
    l_list2.append(input('Значение:'))

if count > 1:
    for i in range(0, count-1, 2):
        buff = l_list2[i]
        l_list2[i] = l_list2[i+1]
        l_list2[i+1] = buff

for element in l_list2:
    print(element)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится
# месяц (зима, весна, лето, осень). Напишите решения через list и через dict.

l_list3 = [[1, 2, 12], 'Зима', [3, 4, 5],  'Весна', [6, 7, 8], 'Лето', [9, 10, 11], 'Осень']

in_month_index = int(input('Введите индекс месяца [1-12]:'))

count = len(l_list3)
for index_season in range(0, count-1,  2):
    for index_m in l_list3[index_season]:
        if index_m == in_month_index:
            print(l_list3[index_season+1])

l_dict3 = {'Зима': [1, 2, 12],
           'Весна': [3, 4, 5],
           'Лето': [6, 7, 8],
           'Осень': [9, 10, 11]}

in_month_index = int(input('Введите индекс месяца [1-12]:'))
for seasons in l_dict3:
    for month in l_dict3[seasons]:
        if month == in_month_index:
            print(seasons)

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

value = input('Введите строку:')
l_list4 = value.split(' ')
i = 0
for element in l_list4:
    i = i + 1
    print('Строка №', i, element[0:10])

# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя
# необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

l_list5 = [7, 5, 3, 3, 2, 1]
in_value = int(input('Введине новое натуральное значение:'))
flag = 0
i = 0
for element in l_list5:
    if element == in_value:
        flag = 1
        continue
    elif flag == 1:
        l_list5.insert(l_list5[element]-1, in_value)
        break
    if element < in_value and i == 0:
        l_list5.insert(0, in_value)
        break
    if element < in_value:
        l_list5.insert(l_list5[element], in_value)
        break
    i = i +1
else:
    l_list5.append(in_value)

print(l_list5)

# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит
# информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами
# (характеристиками товара: название, цена, количество, единица измерения). Структуру нужно сформировать программно,
# т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

l_list6 = [ (1, {'название': 'компьютер', 'цена': 20000, 'количество': 5, 'eд': 'шт.'}),
            (2, {'название': 'принтер', 'цена': 6000, 'количество': 2, 'eд': 'шт.'}),
            (3, {'название': 'сканер', 'цена': 2000, 'количество': 7, 'eд': 'шт.'})]

l_list6.clear()
list_name = ['название', 'цена', 'количество', 'eд']
turple = tuple()

for i in range(0, 3):
    dict_row = {}
    for elem in list_name:
        dict_row.update({elem: input(elem)})
    l_list6.insert(i, (i, dict_row))

print('Входной набор:', l_list6)

dict = {}

name = set()
cost = set()
count = set()
unit = set()
l_list6_out = {}

for row in l_list6:
    for teg in row:
        var_type = type(teg)
        if var_type == type(dict):
            for names in teg:
                if names == 'название':
                    name.add(teg[names])
                elif names == 'цена':
                    cost.add(teg[names])
                elif names == 'количество':
                    count.add(teg[names])
                elif names == 'eд':
                    unit.add(teg[names])

list_buff = list(name)
l_list6_out.update({'название': list_buff})
list_buff = list(cost)
l_list6_out.update({'цена': list_buff})
list_buff = list(count)
l_list6_out.update({'количество': list_buff})
list_buff = list(unit)
l_list6_out.update({'eд': list_buff})
print(l_list6_out)